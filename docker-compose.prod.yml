name: starlight-prod

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:80 --timeout 120 --keep-alive 5
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    expose:
      - "80"
    env_file:
      - .env.prod
    environment:
      - ENVIRONMENT=production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - starlight-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'  
          memory: 512M

  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - starlight-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  redis:
    image: redis:7.4-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - starlight-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A app.infrastructure.tasks.celery_app worker --loglevel=warning --concurrency=4 --max-tasks-per-child=1000
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    env_file:
      - .env.prod
    environment:
      - ENVIRONMENT=production
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - starlight-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A app.infrastructure.tasks.celery_app beat --loglevel=warning
    volumes:
      - logs_data:/app/logs
    env_file:
      - .env.prod
    environment:
      - ENVIRONMENT=production
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - starlight-network
    restart: unless-stopped

  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A app.infrastructure.tasks.celery_app flower --port=5555 --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}
    expose:
      - "5555"
    env_file:
      - .env.prod
    environment:
      - ENVIRONMENT=production
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - starlight-network
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - uploads_data:/app/uploads:ro
      - logs_data:/var/log/nginx
    depends_on:
      - web
    networks:
      - starlight-network
    restart: unless-stopped

  # Monitoring services
  prometheus:
    image: prom/prometheus:v2.55.0
    expose:
      - "9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - starlight-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.4.0
    expose:
      - "3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - starlight-network
    restart: unless-stopped

volumes:
  db_data: {}
  redis_data: {}
  uploads_data: {}
  logs_data: {}
  prometheus_data: {}
  grafana_data: {}

networks:
  starlight-network:
    driver: overlay
    attachable: true
