name: starlight

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: uvicorn app.main:app --host 0.0.0.0 --port 80 --reload
    volumes:
      - .:/app
      - uploads_data:/app/uploads
    ports:
      - "8000:80"
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - starlight-network
    restart: unless-stopped

  db:
    image: postgres:17-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: starlight_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - starlight-network

  redis:
    image: redis:7.4-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - starlight-network

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A app.infrastructure.tasks.celery_app worker --loglevel=info --concurrency=4
    volumes:
      - .:/app
      - uploads_data:/app/uploads
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - starlight-network
    restart: unless-stopped
    deploy:
      replicas: 2

  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A app.infrastructure.tasks.celery_app beat --loglevel=info
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - starlight-network
    restart: unless-stopped

  flower:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    command: celery -A app.infrastructure.tasks.celery_app flower --port=5555
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    env_file:
      - .env
    environment:
      - ENVIRONMENT=development
    depends_on:
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_started
    networks:
      - starlight-network
    restart: unless-stopped

  nginx:
    image: nginx:1.27-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - uploads_data:/app/uploads:ro
    depends_on:
      - web
    networks:
      - starlight-network
    restart: unless-stopped

  # Monitoring services
  prometheus:
    image: prom/prometheus:v2.55.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - starlight-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.4.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - starlight-network
    restart: unless-stopped

volumes:
  db_data: {}
  redis_data: {}
  uploads_data: {}
  prometheus_data: {}
  grafana_data: {}

networks:
  starlight-network:
    driver: bridge
